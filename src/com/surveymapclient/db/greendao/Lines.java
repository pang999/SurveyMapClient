package com.surveymapclient.db.greendao;

import com.surveymapclient.db.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table LINES.
 */
public class Lines {

    private Long lines_id;
    private Long key;
    private String name;
    private Float startx;
    private Float starty;
    private Float endx;
    private Float endy;
    private Double lenght;
    private Double angle;
    private String desc;
    private Integer pcolor;
    private Float pwidth;
    private Boolean isfull;
<<<<<<< HEAD
    private long polygon_id;
=======
    private Long polygon_id;
>>>>>>> fa4a202c7816980a0c716bb84e647853e5a4f4f4

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LinesDao myDao;

    private Polygon polygon;
    private Long polygon__resolvedKey;


    public Lines() {
    }

    public Lines(Long lines_id) {
        this.lines_id = lines_id;
    }

<<<<<<< HEAD
    public Lines(Long lines_id, Long key, String name, Float startx, Float starty, Float endx, Float endy, Double lenght, Double angle, String desc, Integer pcolor, Float pwidth, Boolean isfull, long polygon_id) {
=======
    public Lines(Long lines_id, Long key, String name, Float startx, Float starty, Float endx, Float endy, Double lenght, Double angle, String desc, Integer pcolor, Float pwidth, Boolean isfull, Long polygon_id) {
>>>>>>> fa4a202c7816980a0c716bb84e647853e5a4f4f4
        this.lines_id = lines_id;
        this.key = key;
        this.name = name;
        this.startx = startx;
        this.starty = starty;
        this.endx = endx;
        this.endy = endy;
        this.lenght = lenght;
        this.angle = angle;
        this.desc = desc;
        this.pcolor = pcolor;
        this.pwidth = pwidth;
        this.isfull = isfull;
        this.polygon_id = polygon_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLinesDao() : null;
    }

    public Long getLines_id() {
        return lines_id;
    }

    public void setLines_id(Long lines_id) {
        this.lines_id = lines_id;
    }

    public Long getKey() {
        return key;
    }

    public void setKey(Long key) {
        this.key = key;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Float getStartx() {
        return startx;
    }

    public void setStartx(Float startx) {
        this.startx = startx;
    }

    public Float getStarty() {
        return starty;
    }

    public void setStarty(Float starty) {
        this.starty = starty;
    }

    public Float getEndx() {
        return endx;
    }

    public void setEndx(Float endx) {
        this.endx = endx;
    }

    public Float getEndy() {
        return endy;
    }

    public void setEndy(Float endy) {
        this.endy = endy;
    }

    public Double getLenght() {
        return lenght;
    }

    public void setLenght(Double lenght) {
        this.lenght = lenght;
    }

    public Double getAngle() {
        return angle;
    }

    public void setAngle(Double angle) {
        this.angle = angle;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public Integer getPcolor() {
        return pcolor;
    }

    public void setPcolor(Integer pcolor) {
        this.pcolor = pcolor;
    }

    public Float getPwidth() {
        return pwidth;
    }

    public void setPwidth(Float pwidth) {
        this.pwidth = pwidth;
    }

    public Boolean getIsfull() {
        return isfull;
    }

    public void setIsfull(Boolean isfull) {
        this.isfull = isfull;
    }

<<<<<<< HEAD
    public long getPolygon_id() {
        return polygon_id;
    }

    public void setPolygon_id(long polygon_id) {
=======
    public Long getPolygon_id() {
        return polygon_id;
    }

    public void setPolygon_id(Long polygon_id) {
>>>>>>> fa4a202c7816980a0c716bb84e647853e5a4f4f4
        this.polygon_id = polygon_id;
    }

    /** To-one relationship, resolved on first access. */
    public Polygon getPolygon() {
<<<<<<< HEAD
        long __key = this.polygon_id;
=======
        Long __key = this.polygon_id;
>>>>>>> fa4a202c7816980a0c716bb84e647853e5a4f4f4
        if (polygon__resolvedKey == null || !polygon__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PolygonDao targetDao = daoSession.getPolygonDao();
            Polygon polygonNew = targetDao.load(__key);
            synchronized (this) {
                polygon = polygonNew;
            	polygon__resolvedKey = __key;
            }
        }
        return polygon;
    }

    public void setPolygon(Polygon polygon) {
<<<<<<< HEAD
        if (polygon == null) {
            throw new DaoException("To-one property 'polygon_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.polygon = polygon;
            polygon_id = polygon.getPolygon_id();
=======
        synchronized (this) {
            this.polygon = polygon;
            polygon_id = polygon == null ? null : polygon.getPolygon_id();
>>>>>>> fa4a202c7816980a0c716bb84e647853e5a4f4f4
            polygon__resolvedKey = polygon_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
