package com.surveymapclient.db.greendao;

import java.util.List;
import com.surveymapclient.db.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table POLYGON.
 */
public class Polygon {

    private Long polygon_id;
    private Long key;
    private String name;
    private Double area;
    private String desc;
    private Integer color;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PolygonDao myDao;

    private List<Lines> lines;

    public Polygon() {
    }

    public Polygon(Long polygon_id) {
        this.polygon_id = polygon_id;
    }

    public Polygon(Long polygon_id, Long key, String name, Double area, String desc, Integer color) {
        this.polygon_id = polygon_id;
        this.key = key;
        this.name = name;
        this.area = area;
        this.desc = desc;
        this.color = color;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPolygonDao() : null;
    }

    public Long getPolygon_id() {
        return polygon_id;
    }

    public void setPolygon_id(Long polygon_id) {
        this.polygon_id = polygon_id;
    }

    public Long getKey() {
        return key;
    }

    public void setKey(Long key) {
        this.key = key;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Double getArea() {
        return area;
    }

    public void setArea(Double area) {
        this.area = area;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public Integer getColor() {
        return color;
    }

    public void setColor(Integer color) {
        this.color = color;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Lines> getLines() {
        if (lines == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LinesDao targetDao = daoSession.getLinesDao();
            List<Lines> linesNew = targetDao._queryPolygon_Lines(polygon_id);
            synchronized (this) {
                if(lines == null) {
                    lines = linesNew;
                }
            }
        }
        return lines;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLines() {
        lines = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
