package com.surveymapclient.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.surveymapclient.db.greendao.Polygon;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table POLYGON.
*/
public class PolygonDao extends AbstractDao<Polygon, Long> {

    public static final String TABLENAME = "POLYGON";

    /**
     * Properties of entity Polygon.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Polygon_id = new Property(0, Long.class, "polygon_id", true, "POLYGON_ID");
        public final static Property Key = new Property(1, Long.class, "key", false, "KEY");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Area = new Property(3, Double.class, "area", false, "AREA");
        public final static Property Desc = new Property(4, String.class, "desc", false, "DESC");
        public final static Property Color = new Property(5, Integer.class, "color", false, "COLOR");
    };

    private DaoSession daoSession;


    public PolygonDao(DaoConfig config) {
        super(config);
    }
    
    public PolygonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'POLYGON' (" + //
                "'POLYGON_ID' INTEGER PRIMARY KEY ," + // 0: polygon_id
                "'KEY' INTEGER," + // 1: key
                "'NAME' TEXT," + // 2: name
                "'AREA' REAL," + // 3: area
                "'DESC' TEXT," + // 4: desc
                "'COLOR' INTEGER);"); // 5: color
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'POLYGON'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Polygon entity) {
        stmt.clearBindings();
 
        Long polygon_id = entity.getPolygon_id();
        if (polygon_id != null) {
            stmt.bindLong(1, polygon_id);
        }
 
        Long key = entity.getKey();
        if (key != null) {
            stmt.bindLong(2, key);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Double area = entity.getArea();
        if (area != null) {
            stmt.bindDouble(4, area);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
 
        Integer color = entity.getColor();
        if (color != null) {
            stmt.bindLong(6, color);
        }
    }

    @Override
    protected void attachEntity(Polygon entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Polygon readEntity(Cursor cursor, int offset) {
        Polygon entity = new Polygon( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // polygon_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // key
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // area
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // desc
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // color
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Polygon entity, int offset) {
        entity.setPolygon_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArea(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setColor(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Polygon entity, long rowId) {
        entity.setPolygon_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Polygon entity) {
        if(entity != null) {
            return entity.getPolygon_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
