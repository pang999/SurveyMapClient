package com.surveymapclient.db.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.surveymapclient.db.greendao.Lines;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LINES.
*/
public class LinesDao extends AbstractDao<Lines, Long> {

    public static final String TABLENAME = "LINES";

    /**
     * Properties of entity Lines.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Lines_id = new Property(0, Long.class, "lines_id", true, "LINES_ID");
        public final static Property Key = new Property(1, Long.class, "key", false, "KEY");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Startx = new Property(3, Float.class, "startx", false, "STARTX");
        public final static Property Starty = new Property(4, Float.class, "starty", false, "STARTY");
        public final static Property Endx = new Property(5, Float.class, "endx", false, "ENDX");
        public final static Property Endy = new Property(6, Float.class, "endy", false, "ENDY");
        public final static Property Lenght = new Property(7, Double.class, "lenght", false, "LENGHT");
        public final static Property Angle = new Property(8, Double.class, "angle", false, "ANGLE");
        public final static Property Desc = new Property(9, String.class, "desc", false, "DESC");
        public final static Property Pcolor = new Property(10, Integer.class, "pcolor", false, "PCOLOR");
        public final static Property Pwidth = new Property(11, Float.class, "pwidth", false, "PWIDTH");
        public final static Property Isfull = new Property(12, Boolean.class, "isfull", false, "ISFULL");
        public final static Property Polygon_id = new Property(13, long.class, "polygon_id", false, "POLYGON_ID");
    };

    private DaoSession daoSession;

    private Query<Lines> polygon_LinesQuery;

    public LinesDao(DaoConfig config) {
        super(config);
    }
    
    public LinesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LINES' (" + //
                "'LINES_ID' INTEGER PRIMARY KEY ," + // 0: lines_id
                "'KEY' INTEGER," + // 1: key
                "'NAME' TEXT," + // 2: name
                "'STARTX' REAL," + // 3: startx
                "'STARTY' REAL," + // 4: starty
                "'ENDX' REAL," + // 5: endx
                "'ENDY' REAL," + // 6: endy
                "'LENGHT' REAL," + // 7: lenght
                "'ANGLE' REAL," + // 8: angle
                "'DESC' TEXT," + // 9: desc
                "'PCOLOR' INTEGER," + // 10: pcolor
                "'PWIDTH' REAL," + // 11: pwidth
                "'ISFULL' INTEGER," + // 12: isfull
                "'POLYGON_ID' INTEGER NOT NULL );"); // 13: polygon_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LINES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Lines entity) {
        stmt.clearBindings();
 
        Long lines_id = entity.getLines_id();
        if (lines_id != null) {
            stmt.bindLong(1, lines_id);
        }
 
        Long key = entity.getKey();
        if (key != null) {
            stmt.bindLong(2, key);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Float startx = entity.getStartx();
        if (startx != null) {
            stmt.bindDouble(4, startx);
        }
 
        Float starty = entity.getStarty();
        if (starty != null) {
            stmt.bindDouble(5, starty);
        }
 
        Float endx = entity.getEndx();
        if (endx != null) {
            stmt.bindDouble(6, endx);
        }
 
        Float endy = entity.getEndy();
        if (endy != null) {
            stmt.bindDouble(7, endy);
        }
 
        Double lenght = entity.getLenght();
        if (lenght != null) {
            stmt.bindDouble(8, lenght);
        }
 
        Double angle = entity.getAngle();
        if (angle != null) {
            stmt.bindDouble(9, angle);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(10, desc);
        }
 
        Integer pcolor = entity.getPcolor();
        if (pcolor != null) {
            stmt.bindLong(11, pcolor);
        }
 
        Float pwidth = entity.getPwidth();
        if (pwidth != null) {
            stmt.bindDouble(12, pwidth);
        }
 
        Boolean isfull = entity.getIsfull();
        if (isfull != null) {
            stmt.bindLong(13, isfull ? 1l: 0l);
        }
        stmt.bindLong(14, entity.getPolygon_id());
    }

    @Override
    protected void attachEntity(Lines entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Lines readEntity(Cursor cursor, int offset) {
        Lines entity = new Lines( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // lines_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // key
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // startx
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // starty
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // endx
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // endy
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // lenght
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // angle
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // desc
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // pcolor
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11), // pwidth
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isfull
            cursor.getLong(offset + 13) // polygon_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Lines entity, int offset) {
        entity.setLines_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartx(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setStarty(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setEndx(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setEndy(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setLenght(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setAngle(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setDesc(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPcolor(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setPwidth(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
        entity.setIsfull(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setPolygon_id(cursor.getLong(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Lines entity, long rowId) {
        entity.setLines_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Lines entity) {
        if(entity != null) {
            return entity.getLines_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "lines" to-many relationship of Polygon. */
    public List<Lines> _queryPolygon_Lines(long polygon_id) {
        synchronized (this) {
            if (polygon_LinesQuery == null) {
                QueryBuilder<Lines> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Polygon_id.eq(null));
                polygon_LinesQuery = queryBuilder.build();
            }
        }
        Query<Lines> query = polygon_LinesQuery.forCurrentThread();
        query.setParameter(0, polygon_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPolygonDao().getAllColumns());
            builder.append(" FROM LINES T");
            builder.append(" LEFT JOIN POLYGON T0 ON T.'POLYGON_ID'=T0.'POLYGON_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Lines loadCurrentDeep(Cursor cursor, boolean lock) {
        Lines entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Polygon polygon = loadCurrentOther(daoSession.getPolygonDao(), cursor, offset);
         if(polygon != null) {
            entity.setPolygon(polygon);
        }

        return entity;    
    }

    public Lines loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Lines> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Lines> list = new ArrayList<Lines>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Lines> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Lines> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
